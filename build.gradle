buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.4.1.RELEASE'
    }
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '3.0.3'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'

version 'latest'
group 'daggerok'

jar {
    baseName = 'minikube-spring-boot-docker'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories { mavenCentral() }

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-mustache',
            'org.projectlombok:lombok',
            'org.webjars:bootstrap:3.3.7-1',
            'org.webjars:webjars-locator:0.32'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

// Read plugin documentation here:
// http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/Dockerfile.html

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
task createDockerfile(type: Dockerfile) {
    dependsOn build

    destFile = project.file './Dockerfile'
    from 'java:8'
    maintainer 'Maksim Kostromin "daggerok@gmail.com"'
    copyFile 'build/libs/', '/opt/apps/'
    exposePort 8080
    entryPoint 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/opt/apps/minikube-spring-boot-docker-latest.jar'
    volume '/tmp'
}

// update your credentials in ./gradle.properties

def image = "${project.name}:${project.version}"
def repo = image

task chackCreds(type: Task, dependsOn: ['buildImage', 'createContainer', 'commitImage', 'pushImage', 'pullImage']) {

    if (!project.hasProperty('dockerHubUsername') || !project.hasProperty('dockerHubPassword')) {
        throw new GradleException('update your credentials in ./gradle.properties file within required information')
    }

    def username = project.property('dockerHubUsername')

    image = "$username/${image}"
    repo = "$username/$project.name"
}

docker {
    //// not worked on linux
    // url = 'http://localhost:2375'
    url = 'unix:///var/run/docker.sock'

    registryCredentials {
        url = 'https://some.registry.com/'
        username = project.hasProperty('dockerHubUsername') ? project.property('dockerHubUsername') : null
        password = project.hasProperty('dockerHubPassword') ? project.property('dockerHubPassword') : null
        email = project.hasProperty('dockerHubEmail') ? project.property('dockerHubEmail') : null
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = image
    remove = true
}

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
task createContainer(type: DockerCreateContainer) {
    imageId = image
    cmd = ['true'] as String[]
}

import com.bmuschko.gradle.docker.tasks.image.DockerCommitImage
task commitImage(type: DockerCommitImage) {
    dependsOn createContainer
    repository = repo
    targetContainerId { createContainer.getContainerId() }
}

import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
task pushImage(type: DockerPushImage) {
    dependsOn commitImage
    imageName = image
}

import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
task pullImage(type: DockerPullImage) {
    repository = repo
    tag = "$version"
}

/*

// TODO: functional testing in docker

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task buildMyAppImage(type: DockerBuildImage) {
    inputDir = file('docker/myapp')
    tag = 'test/myapp'
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}
 */
